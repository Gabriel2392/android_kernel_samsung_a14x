/*
 * Samsung Exynos SoC series Sensor driver
 *
 *
 * Copyright (c) 2016 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef IS_CIS_HM3_H
#define IS_CIS_HM3_H

#include "is-cis.h"

#define SENSOR_HM3_MAX_WIDTH		(12000 + 0)
#define SENSOR_HM3_MAX_HEIGHT		(9000 + 0)

#define SENSOR_HM3_FINE_INTEGRATION_TIME_MIN	0x100
#define SENSOR_HM3_FINE_INTEGRATION_TIME_MAX	0x100

#define USE_GROUP_PARAM_HOLD	(1)

#define HM3_BURST_WRITE
#define HM3_CAL_ROW_LEN	(3)
#define HM3_CAL_START_ADDR	(0)
#define HM3_CAL_END_ADDR	(1)
#define HM3_CAL_BURST_CHECK	(2)

enum sensor_hm3_mode_enum {
	SENSOR_HM3_12000X9000_10FPS = 0,
	SENSOR_HM3_8000X6000_7FPS = 1,
	SENSOR_HM3_7680X4320_24FPS = 2,
	SENSOR_HM3_7680X4320_30FPS = 3,
	SENSOR_HM3_4000X3000_15FPS_DL_LN4 = 4,
	SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12 = 5,
	SENSOR_HM3_4000X3000_15FPS_RM_ABS = 6,
	SENSOR_HM3_4000X3000_30FPS_3S3A = 7,
	SENSOR_HM3_4000X3000_30FPS_3S3A_LN = 8,
	SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12 = 9,
	SENSOR_HM3_4000X3000_30FPS_DL = 10,
	SENSOR_HM3_4000X3000_30FPS_DL_LN2 = 11,
	SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12 = 12,
	SENSOR_HM3_4000X3000_30FPS_DL_R12 = 13,
	SENSOR_HM3_4000X3000_30FPS_IDCG_3S3A_R12 = 14,
	SENSOR_HM3_4000X3000_30FPS_IDCG_R12 = 15,
	SENSOR_HM3_4000X3000_60FPS_3S3A = 16,
	SENSOR_HM3_4000X3000_60FPS_3S3A_R12 = 17,
	SENSOR_HM3_4000X3000_60FPS_DL = 18,
	SENSOR_HM3_4000X3000_60FPS_DL_R12 = 19,
	SENSOR_HM3_4000X2252_15FPS_DL_LN4 = 20,
	SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12 = 21,
	SENSOR_HM3_4000X2252_30FPS_3S3A = 22,
	SENSOR_HM3_4000X2252_30FPS_3S3A_LN = 23,
	SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12 = 24,
	SENSOR_HM3_4000X2252_30FPS_DL = 25,
	SENSOR_HM3_4000X2252_30FPS_DL_LN2 = 26,
	SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12 = 27,
	SENSOR_HM3_4000X2252_30FPS_DL_R12 = 28,
	SENSOR_HM3_4000X2252_30FPS_IDCG_3S3A_R12 = 29,
	SENSOR_HM3_4000X2252_30FPS_IDCG_R12 = 30,
	SENSOR_HM3_4000X2252_30FPS_RM = 31,
	SENSOR_HM3_4000X2252_60FPS_3S3A = 32,
	SENSOR_HM3_4000X2252_60FPS_3S3A_R12 = 33,
	SENSOR_HM3_4000X2252_60FPS_DL = 34,
	SENSOR_HM3_4000X2252_60FPS_DL_R12 = 35,
	SENSOR_HM3_3840X2160_120FPS = 36,
	SENSOR_HM3_3328X1872_120FPS = 37,
	SENSOR_HM3_2800X2100_30FPS_DL = 38,
	SENSOR_HM3_2800X2100_30FPS_DL_R12 = 39,
	SENSOR_HM3_1984X1488_30FPS = 40,
	SENSOR_HM3_1920X1080_240FPS = 41,
	SENSOR_HM3_992X744_120FPS = 42,
	SENSOR_HM3_MODE_MAX,
};

enum hm3_endian {
	HM3_LITTLE_ENDIAN = 0,
	HM3_BIG_ENDIAN = 1,
};

#define HM3_ENDIAN(a, b, endian)  ((endian == HM3_BIG_ENDIAN) ? ((a << 8)|(b)) : ((a)|(b << 8)))

#if IS_ENABLED(USE_CAMERA_SENSOR_RETENTION)
enum sensor_hm3_load_sram_mode {
	SENSOR_HM3_4000X3000_30FPS_DL_R12_LOAD_SRAM = 0,
	SENSOR_HM3_4000X3000_30FPS_DL_LOAD_SRAM = 1,
	SENSOR_HM3_4000X3000_60FPS_DL_R12_LOAD_SRAM = 2,
	SENSOR_HM3_4000X3000_60FPS_DL_LOAD_SRAM = 3,
	SENSOR_HM3_4000X2252_30FPS_DL_R12_LOAD_SRAM = 4,
	SENSOR_HM3_4000X2252_30FPS_DL_LOAD_SRAM = 5,
	SENSOR_HM3_4000X2252_60FPS_DL_R12_LOAD_SRAM = 6,
	SENSOR_HM3_4000X2252_60FPS_DL_LOAD_SRAM = 7,
	SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12_LOAD_SRAM = 8,
	SENSOR_HM3_4000X3000_30FPS_DL_LN2_LOAD_SRAM = 9,
	SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12_LOAD_SRAM = 10,
	SENSOR_HM3_4000X2252_30FPS_DL_LN2_LOAD_SRAM = 11,
	SENSOR_HM3_4000X2252_30FPS_3S3A_LOAD_SRAM = 12,
	SENSOR_HM3_4000X3000_60FPS_3S3A_LOAD_SRAM = 13,
	SENSOR_HM3_4000X3000_60FPS_3S3A_R12_LOAD_SRAM = 14,
	SENSOR_HM3_4000X3000_30FPS_3S3A_LOAD_SRAM = 15,
	SENSOR_HM3_4000X2252_60FPS_3S3A_LOAD_SRAM = 16,
	SENSOR_HM3_4000X2252_60FPS_3S3A_R12_LOAD_SRAM = 17,
	SENSOR_HM3_4000X2252_30FPS_3S3A_LN_LOAD_SRAM = 18,
	SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12_LOAD_SRAM = 19,
	SENSOR_HM3_4000X3000_30FPS_3S3A_LN_LOAD_SRAM = 20,
	SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12_LOAD_SRAM = 21,
	SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12_LOAD_SRAM = 22,
	SENSOR_HM3_4000X3000_15FPS_DL_LN4_LOAD_SRAM = 23,
	SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12_LOAD_SRAM = 24,
	SENSOR_HM3_4000X2252_15FPS_DL_LN4_LOAD_SRAM = 25,
	SENSOR_HM3_4000X3000_15FPS_RM_ABS_1_1P5_LOAD_SRAM = 26,
	SENSOR_HM3_4000X3000_20FPS_RM_ABS_1_2P0_LOAD_SRAM = 27,
	SENSOR_HM3_4000X3000_15FPS_RM_ABS_2_1P5_LOAD_SRAM = 28,
	SENSOR_HM3_4000X3000_20FPS_RM_ABS_2_2P0_LOAD_SRAM = 29,
	SENSOR_HM3_LOAD_SRAM_MAX,
};
#endif

//{ max_analog_gain, max_digital_gain, min_coarse_integration_time, max_margin_coarse_integration_time, },
struct sensor_common_mode_attr sensor_hm3_common_mode_attr[SENSOR_HM3_MODE_MAX] = {
	{0x200, 0x1000, 0xC, 0xD, }, /* SENSOR_HM3_12000X9000_10FPS = 0, */
	{0x200, 0x1000, 0xC, 0xD, }, /* SENSOR_HM3_8000X6000_7FPS = 1, */
	{0x200, 0x1000, 0xC, 0xD, }, /* SENSOR_HM3_7680X4320_24FPS = 2, */
	{0x200, 0x1000, 0xC, 0xD, }, /* SENSOR_HM3_7680X4320_30FPS = 3, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4 = 4, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12 = 5, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_15FPS_RM_ABS = 6, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A = 7, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN = 8, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12 = 9, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_DL = 10, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2 = 11, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12 = 12, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_DL_R12 = 13, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_3S3A_R12 = 14, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_R12 = 15, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A = 16, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A_R12 = 17, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_60FPS_DL = 18, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X3000_60FPS_DL_R12 = 19, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4 = 20, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12 = 21, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A = 22, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN = 23, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12 = 24, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_DL = 25, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2 = 26, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12 = 27, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_DL_R12 = 28, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_3S3A_R12 = 29, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_R12 = 30, */
	{0x200, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_30FPS_RM = 31, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A = 32, */
	{0x600, 0x1000, 0xA, 0x11, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A_R12 = 33, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_60FPS_DL = 34, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_4000X2252_60FPS_DL_R12 = 35, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_3840X2160_120FPS = 36, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_3328X1872_120FPS = 37, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_2800X2100_30FPS_DL = 38, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_2800X2100_30FPS_DL_R12 = 39, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_1984X1488_30FPS = 40, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_1920X1080_240FPS = 41, */
	{0x600, 0x1000, 0xA, 0xD, }, /* SENSOR_HM3_992X744_120FPS = 42, */
};

struct sensor_hm3_specific_mode_attr {
	bool wb_gain_support;
	bool ln_support;
	bool highres_capture_mode;
	enum is_sensor_12bit_state status_12bit;
};

struct sensor_hm3_specific_mode_attr sensor_hm3_spec_mode_attr[SENSOR_HM3_MODE_MAX] = {
	{true, false, true, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_12000X9000_10FPS = 0, */
	{true, false, true, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_8000X6000_7FPS = 1, */
	{true, false, true, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_7680X4320_24FPS = 2, */
	{true, false, true, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_7680X4320_30FPS = 3, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4 = 4, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12 = 5, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_15FPS_RM_ABS = 6, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A = 7, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN = 8, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12 = 9, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_30FPS_DL = 10, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2 = 11, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12 = 12, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_30FPS_DL_R12 = 13, */
	{false, false, false, SENSOR_12BIT_STATE_REAL_12BIT, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_3S3A_R12 = 14, */
	{false, false, false, SENSOR_12BIT_STATE_REAL_12BIT, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_R12 = 15, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A = 16, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A_R12 = 17, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X3000_60FPS_DL = 18, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X3000_60FPS_DL_R12 = 19, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4 = 20, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12 = 21, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A = 22, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN = 23, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12 = 24, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_30FPS_DL = 25, */
	{false, true, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2 = 26, */
	{false, true, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12 = 27, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_30FPS_DL_R12 = 28, */
	{false, false, false, SENSOR_12BIT_STATE_REAL_12BIT, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_3S3A_R12 = 29, */
	{false, false, false, SENSOR_12BIT_STATE_REAL_12BIT, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_R12 = 30, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_30FPS_RM = 31, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A = 32, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A_R12 = 33, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_4000X2252_60FPS_DL = 34, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_4000X2252_60FPS_DL_R12 = 35, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_3840X2160_120FPS = 36, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_3328X1872_120FPS = 37, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_2800X2100_30FPS_DL = 38, */
	{false, false, false, SENSOR_12BIT_STATE_PSEUDO_12BIT, }, /* SENSOR_HM3_2800X2100_30FPS_DL_R12 = 39, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_1984X1488_30FPS = 40, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_1920X1080_240FPS = 41, */
	{false, false, false, SENSOR_12BIT_STATE_OFF, }, /* SENSOR_HM3_992X744_120FPS = 42, */
};

#if IS_ENABLED(USE_CAMERA_SENSOR_RETENTION)
#define SENSOR_HM3_FAST_CHANGE_IDX_NONE (0x00FF)
#define SENSOR_HM3_LOAD_SRAM_IDX_NONE (-1)
struct sensor_hm3_specific_mode_retention_attr {
	u32 fast_change_idx;
	u32 load_sram_idx;
};

struct sensor_hm3_specific_mode_retention_attr sensor_hm3_spec_mode_retention_attr[SENSOR_HM3_MODE_MAX] = {
	{0x0100, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_12000X9000_10FPS = 0, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_8000X6000_7FPS = 1, */
	{0x010E, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_7680X4320_24FPS = 2, */
	{0x010F, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_7680X4320_30FPS = 3, */
	{0x010B, SENSOR_HM3_4000X3000_15FPS_DL_LN4_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4 = 4, */
	{0x010B, SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_15FPS_DL_LN4_R12 = 5, */
	{0x010C, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X3000_15FPS_RM_ABS = 6, */
	{0x0106, SENSOR_HM3_4000X3000_30FPS_3S3A_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A = 7, */
	{0x0107, SENSOR_HM3_4000X3000_30FPS_3S3A_LN_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN = 8, */
	{0x0107, SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_3S3A_LN_R12 = 9, */
	{0x0101, SENSOR_HM3_4000X3000_30FPS_DL_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_DL = 10, */
	{0x0103, SENSOR_HM3_4000X3000_30FPS_DL_LN2_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2 = 11, */
	{0x0103, SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_DL_LN2_R12 = 12, */
	{0x0101, SENSOR_HM3_4000X3000_30FPS_DL_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_30FPS_DL_R12 = 13, */
	{0x0109, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_3S3A_R12 = 14, */
	{0x0104, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X3000_30FPS_IDCG_R12 = 15, */
	{0x0106, SENSOR_HM3_4000X3000_60FPS_3S3A_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A = 16, */
	{0x0106, SENSOR_HM3_4000X3000_60FPS_3S3A_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_60FPS_3S3A_R12 = 17, */
	{0x0101, SENSOR_HM3_4000X3000_60FPS_DL_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_60FPS_DL = 18, */
	{0x0101, SENSOR_HM3_4000X3000_60FPS_DL_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X3000_60FPS_DL_R12 = 19, */
	{0x010B, SENSOR_HM3_4000X2252_15FPS_DL_LN4_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4 = 20, */
	{0x010B, SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_15FPS_DL_LN4_R12 = 21, */
	{0x0106, SENSOR_HM3_4000X2252_30FPS_3S3A_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A = 22, */
	{0x0107, SENSOR_HM3_4000X2252_30FPS_3S3A_LN_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN = 23, */
	{0x0107, SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_3S3A_LN_R12 = 24, */
	{0x0102, SENSOR_HM3_4000X2252_30FPS_DL_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_DL = 25, */
	{0x0103, SENSOR_HM3_4000X2252_30FPS_DL_LN2_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2 = 26, */
	{0x0103, SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_DL_LN2_R12 = 27, */
	{0x0102, SENSOR_HM3_4000X2252_30FPS_DL_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_30FPS_DL_R12 = 28, */
	{0x010A, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_3S3A_R12 = 29, */
	{0x0105, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X2252_30FPS_IDCG_R12 = 30, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_4000X2252_30FPS_RM = 31, */
	{0x0106, SENSOR_HM3_4000X2252_60FPS_3S3A_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A = 32, */
	{0x0106, SENSOR_HM3_4000X2252_60FPS_3S3A_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_60FPS_3S3A_R12 = 33, */
	{0x0102, SENSOR_HM3_4000X2252_60FPS_DL_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_60FPS_DL = 34, */
	{0x0102, SENSOR_HM3_4000X2252_60FPS_DL_R12_LOAD_SRAM, }, /* SENSOR_HM3_4000X2252_60FPS_DL_R12 = 35, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_3840X2160_120FPS = 36, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_3328X1872_120FPS = 37, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_2800X2100_30FPS_DL = 38, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_2800X2100_30FPS_DL_R12 = 39,*/
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_1984X1488_30FPS = 40, */
	{SENSOR_HM3_FAST_CHANGE_IDX_NONE, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_1920X1080_240FPS = 41, */
	{0x0108, SENSOR_HM3_LOAD_SRAM_IDX_NONE, }, /* SENSOR_HM3_992X744_120FPS = 42, */
};

#define MODE_GROUP_NONE (-1)
enum sensor_hm3_mode_group_enum {
	SENSOR_HM3_MODE_DEFAULT,
	SENSOR_HM3_MODE_IDCG,
	SENSOR_HM3_MODE_LN,
	SENSOR_HM3_MODE_MODE_GROUP_MAX
};

u32 sensor_hm3_mode_groups[SENSOR_HM3_MODE_MODE_GROUP_MAX];
#endif

/* dual sync - indirect */
static const u32 sensor_hm3_cis_dual_master_settings[] = {
	0xFCFC, 0x4000, 0x02,
	0x6000, 0x0005, 0x02,
	0x0A70, 0x0001, 0x02,
	0x0A72, 0x0100, 0x02,
	0x0A74, 0x0000, 0x02,
	0x0A76, 0x0000, 0x02,
	0x0A78, 0x0000, 0x02,
	0x0A7A, 0x0001, 0x02,
	0x0A7C, 0x0100, 0x02,
	0x0A80, 0x0018, 0x02,
	0x6028, 0x2000, 0x02,
	0x602A, 0x15CE, 0x02,
	0x6F12, 0x0000, 0x02,
	0x6F12, 0x0020, 0x02,
	0x602A, 0x15D6, 0x02,
	0x6F12, 0x1020, 0x02,
	0x602A, 0x15EA, 0x02,
	0x6F12, 0x0000, 0x02,
	0x602A, 0x1698, 0x02,
	0x6F12, 0x0001, 0x02,
	0x6000, 0x0085, 0x02,
};

static const u32 sensor_hm3_cis_dual_master_settings_size =
	ARRAY_SIZE(sensor_hm3_cis_dual_master_settings);

static const u32 sensor_hm3_cis_dual_slave_settings[] = {/* wait for master */
	0xFCFC, 0x4000, 0x02,
	0x6000, 0x0005, 0x02,
	0x0A70, 0x0001, 0x02,
	0x0A72, 0x0001, 0x02,
	0x0A74, 0x0001, 0x02,
	0x0A76, 0x0001, 0x02,
	0x0A78, 0x0000, 0x02,
	0x0A7A, 0x0000, 0x02,
	0x0A7C, 0x0100, 0x02,
	0x0A80, 0x0018, 0x02,
	0x6028, 0x2000, 0x02,
	0x602A, 0x15CE, 0x02,
	0x6F12, 0x0000, 0x02,
	0x6F12, 0x0020, 0x02,
	0x602A, 0x15D6, 0x02,
	0x6F12, 0x1020, 0x02,
	0x602A, 0x15EA, 0x02,
	0x6F12, 0x0000, 0x02,
	0x602A, 0x1698, 0x02,
	0x6F12, 0x0300, 0x02,
	0x6000, 0x0085, 0x02,
};

static const u32 sensor_hm3_cis_dual_slave_settings_size =
	ARRAY_SIZE(sensor_hm3_cis_dual_slave_settings);

static const u32 sensor_hm3_cis_dual_standalone_settings[] = {
	0xFCFC, 0x4000, 0x02,
	0x6000, 0x0005, 0x02,
	0x0A70, 0x0000, 0x02,
	0x0A72, 0x0000, 0x02,
	0x0A74, 0x0000, 0x02,
	0x0A76, 0x0000, 0x02,
	0x0A78, 0x0000, 0x02,
	0x0A7A, 0x0000, 0x02,
	0x0A7C, 0x0100, 0x02,
	0x0A80, 0x0018, 0x02,
	0x6028, 0x2000, 0x02,
	0x602A, 0x15CE, 0x02,
	0x6F12, 0x0000, 0x02,
	0x6F12, 0x0020, 0x02,
	0x602A, 0x15D6, 0x02,
	0x6F12, 0x1020, 0x02,
	0x602A, 0x15EA, 0x02,
	0x6F12, 0x0000, 0x02,
	0x602A, 0x1698, 0x02,
	0x6F12, 0x0000, 0x02,
	0x6000, 0x0085, 0x02,
};

static const u32 sensor_hm3_cis_dual_standalone_settings_size =
	ARRAY_SIZE(sensor_hm3_cis_dual_standalone_settings);

static u32 sensor_hm3_pre_PDXTC_1[] = {
	0xFCFC, 0x2000, 0x02,
	0xC1A4, 0x0002, 0x02,
	0xC1F2, 0x0040, 0x02,
	0xC1AA, 0x0001, 0x02,
	0xFCFC, 0x4000, 0x02,
#ifdef HM3_BURST_WRITE
	0x6004, 0x0001, 0x02,
#endif
	0x6028, 0x2000, 0x02,
	0x602A, 0xC1E0, 0x02,
};

static u32 sensor_hm3_post_PDXTC_1[] = {};

static u32 sensor_hm3_pre_PDXTC_2[] = {
	0x6028, 0x2001, 0x02,
	0x602A, 0x6840, 0x02,
};
static u32 sensor_hm3_post_PDXTC_2[] = {
	0xFCFC, 0x4000, 0x02,
#ifdef HM3_BURST_WRITE
	0x6004, 0x0000, 0x02,
#endif
	0xFCFC, 0x4000, 0x02,
	0x0D0A, 0x0101, 0x02,
	0xFCFC, 0x2000, 0x02,
	0xC1C0, 0x00E4, 0x02,
	0xC1BC, 0x0024, 0x02,
	0xC1B0, 0x0707, 0x02,
	0xC1B0, 0x0707, 0x02,
	0xC1B2, 0x0700, 0x02,
	0xC1D6, 0x0007, 0x02,
	0xC1D8, 0x0633, 0x02,
	0xC1DA, 0x03BB, 0x02,
	0xC1DC, 0x03BB, 0x02,
	0xC1DE, 0x03BB, 0x02,
	0xC1A2, 0x0001, 0x02,
	0xC1A2, 0x0001, 0x02,
};

static u32 * sensor_hm3_pre_PDXTC[] = {
	sensor_hm3_pre_PDXTC_1,
	sensor_hm3_pre_PDXTC_2,
};

static const u32 sensor_hm3_pre_PDXTC_size[] = {
	ARRAY_SIZE(sensor_hm3_pre_PDXTC_1),
	ARRAY_SIZE(sensor_hm3_pre_PDXTC_2),
};

static u32 * sensor_hm3_post_PDXTC[] = {
	sensor_hm3_post_PDXTC_1,
	sensor_hm3_post_PDXTC_2,
};

static const u32 sensor_hm3_post_PDXTC_size[] = {
	ARRAY_SIZE(sensor_hm3_post_PDXTC_1),
	ARRAY_SIZE(sensor_hm3_post_PDXTC_2),
};

static u32 sensor_hm3_pre_GCC_1[] = {
	0xFCFC, 0x2000, 0x02,
	0xC6A2, 0x0302, 0x02,
	0xFCFC, 0x2001, 0x02,
	0xFCFC, 0x4000, 0x02,
#ifdef HM3_BURST_WRITE
	0x6004, 0x0001, 0x02,
#endif
	0x6028, 0x2001, 0x02,
	0x602A, 0x75B0, 0x02,
};

static u32 sensor_hm3_post_GCC_1[] = {};

static u32 sensor_hm3_pre_GCC_2[] = {
	0x602A, 0x75B4, 0x02,
};

static u32 sensor_hm3_post_GCC_2[] = {
	0xFCFC, 0x4000, 0x02,
#ifdef HM3_BURST_WRITE
	0x6004, 0x0000, 0x02,
#endif
	0xFCFC, 0x2000, 0x02,
	0xC6CC, 0x002E, 0x02,
	0xC6CE, 0x002C, 0x02,
	0xC6D0, 0x0146, 0x02,
	0xC6D2, 0x0148, 0x02,
	0xC6D4, 0x0024, 0x02,
	0xC6D6, 0x0037, 0x02,
	0xFCFC, 0x4000, 0x02,
	0x0D0A, 0x0101, 0x02,
	0x0D00, 0x0101, 0x02,
};

static u32 * sensor_hm3_pre_GCC[] = {
	sensor_hm3_pre_GCC_1,
	sensor_hm3_pre_GCC_2,
};

static const u32 sensor_hm3_pre_GCC_size[] = {
	ARRAY_SIZE(sensor_hm3_pre_GCC_1),
	ARRAY_SIZE(sensor_hm3_pre_GCC_2),
};

static u32 * sensor_hm3_post_GCC[] = {
	sensor_hm3_post_GCC_1,
	sensor_hm3_post_GCC_2,
};

static const u32 sensor_hm3_post_GCC_size[] = {
	ARRAY_SIZE(sensor_hm3_post_GCC_1),
	ARRAY_SIZE(sensor_hm3_post_GCC_2),
};

static u32 sensor_hm3_pre_XTC_1[] = {
	0xFCFC, 0x4000, 0x02,
	0x6218, 0xE9E0, 0x02,
	0xFCFC, 0x2000, 0x02,
	0xAAE0, 0x0303, 0x02,
	0xFCFC, 0x4000, 0x02,
	0x6600, 0x0001, 0x02,
	0x6602, 0x0003, 0x02,
	0x702A, 0x0000, 0x02,
	0xFCFC, 0x2000, 0x02,
	0x972C, 0x0000, 0x02,
	0xFCFC, 0x4000, 0x02,
	0x0FE8, 0x0000, 0x02,
	0xFCFC, 0x2000, 0x02,
	0x9730, 0x0000, 0x02,
	0xFCFC, 0x4000, 0x02,
	0x0FEC, 0x0000, 0x02,
	0xFCFC, 0x2000, 0x02,
	0xAA9A, 0x0002, 0x02,
	0xAC96, 0x0100, 0x02,
	0xAABE, 0x2598, 0x02,
	0xAABC, 0x3114, 0x02,
	0xAABA, 0x2A1E, 0x02,
	0xAAC0, 0x011A, 0x02,
	0xAAC2, 0x0138, 0x02,
	0xAC16, 0x0100, 0x02,
	0xAC18, 0x0000, 0x02,
	0xAC1A, 0x0007, 0x02,
	0xAC1E, 0x0600, 0x02,
	0xAC20, 0x0808, 0x02,
	0xAC22, 0x0606, 0x02,
	0xAC24, 0x0606, 0x02,
	0xAC26, 0x0606, 0x02,
	0xAC28, 0x0606, 0x02,
	0xAC2A, 0x0606, 0x02,
	0xAC2C, 0x0606, 0x02,
	0xAC2E, 0x0105, 0x02,
	0xAC30, 0x0B0D, 0x02,
	0xAC32, 0x0F12, 0x02,
	0xAC34, 0x1617, 0x02,
	0xAC36, 0x181E, 0x02,
	0xAC38, 0x1E1E, 0x02,
	0xAC3A, 0x1E1E, 0x02,
	0xAC3C, 0x1E00, 0x02,
	0xAC1C, 0x0606, 0x02,
	0xAC98, 0x077A, 0x02,
	0xAAAA, 0x0001, 0x02,
	0xAAE8, 0x0002, 0x02,
	0xAAEA, 0x0002, 0x02,
	0xAAE4, 0x004C, 0x02,
	0xAAE6, 0x0041, 0x02,
	0xAC84, 0x050A, 0x02,
	0xAC86, 0x10FF, 0x02,
	0xAC3E, 0x0000, 0x02,
	0xAC40, 0x0000, 0x02,
	0xAC42, 0x0000, 0x02,
	0xAC44, 0x0000, 0x02,
	0xAC46, 0x0000, 0x02,
	0xAC48, 0x0000, 0x02,
	0xAC4A, 0x0000, 0x02,
	0xAC4C, 0x0000, 0x02,
	0xAC4E, 0x0000, 0x02,
	0xAC50, 0x0000, 0x02,
	0xAC52, 0x0000, 0x02,
	0xAC54, 0x0000, 0x02,
	0xAC56, 0x0000, 0x02,
	0xAC58, 0x0000, 0x02,
	0xAC5A, 0x0000, 0x02,
	0xAC5C, 0x0000, 0x02,
	0xAC5E, 0x0000, 0x02,
	0xAC60, 0x0000, 0x02,
	0xAC66, 0x0008, 0x02,
	0xAC68, 0x0808, 0x02,
	0xAC6A, 0x0808, 0x02,
	0xAC6C, 0x0808, 0x02,
	0xAC6E, 0x0808, 0x02,
	0xAC70, 0x0808, 0x02,
	0xAC72, 0x0808, 0x02,
	0xAC74, 0x0801, 0x02,
	0xAC76, 0x050B, 0x02,
	0xAC78, 0x0D0F, 0x02,
	0xAC7A, 0x1216, 0x02,
	0xAC7C, 0x1718, 0x02,
	0xAC7E, 0x1E1E, 0x02,
	0xAC80, 0x1E1E, 0x02,
	0xAC82, 0x1E1E, 0x02,
	0xAC62, 0x0706, 0x02,
	0xAC64, 0x0606, 0x02,
	0xAC9A, 0x29DF, 0x02,
	0xAC6E, 0x0808, 0x02,
	0xAC70, 0x0808, 0x02,
	0xAC72, 0x0808, 0x02,
	0xAC74, 0x0801, 0x02,
	0xAC76, 0x050B, 0x02,
	0xAC78, 0x0D0F, 0x02,
	0xAC7A, 0x1216, 0x02,
	0xAC7C, 0x1718, 0x02,
	0xAC7E, 0x1E1E, 0x02,
	0xAC80, 0x1E1E, 0x02,
	0xAC82, 0x1E1E, 0x02,
	0xAC62, 0x0706, 0x02,
	0xAC64, 0x0606, 0x02,
	0xAC9A, 0x29DF, 0x02,
	0xFCFC, 0x2014, 0x02,
	0xFCFC, 0x4000, 0x02,
#ifdef HM3_BURST_WRITE
	0x6004, 0x0001, 0x02,
#endif
	0x6028, 0x2014, 0x02,
	0x602A, 0x445C, 0x02,
};
static u32 sensor_hm3_post_XTC_1[] = {
	0xFCFC, 0x4000, 0x02,
	0x6004, 0x0000, 0x02,
	0xFCFC, 0x2000, 0x02,
	0xAAAC, 0x1388, 0x02,
	0xFCFC, 0x4000, 0x02,
	0x0B00, 0x0101, 0x02,
	0x6602, 0x0155, 0x02,
	0x0D80, 0x1388, 0x02,
	0x0B00, 0x0101, 0x02,
	0xFCFC, 0x2000, 0x02,
	0xAAE2, 0x0101, 0x02,
	0xAA80, 0x0100, 0x02,
	0xFCFC, 0x4000, 0x02,
};

static u32 * sensor_hm3_pre_XTC[] = {
	sensor_hm3_pre_XTC_1,
};

static const u32 sensor_hm3_pre_XTC_size[] = {
	ARRAY_SIZE(sensor_hm3_pre_XTC_1),
};

static u32 * sensor_hm3_post_XTC[] = {
	sensor_hm3_post_XTC_1,
};

static const u32 sensor_hm3_post_XTC_size[] = {
	ARRAY_SIZE(sensor_hm3_post_XTC_1),
};

int sensor_hm3_cis_stream_on(struct v4l2_subdev *subdev);
int sensor_hm3_cis_stream_off(struct v4l2_subdev *subdev);
int sensor_hm3_cis_set_lownoise_mode_change(struct v4l2_subdev *subdev);
#if IS_ENABLED(USE_CAMERA_SENSOR_RETENTION)
int sensor_hm3_cis_retention_crc_check(struct v4l2_subdev *subdev);
int sensor_hm3_cis_retention_prepare(struct v4l2_subdev *subdev);
#endif
#endif
